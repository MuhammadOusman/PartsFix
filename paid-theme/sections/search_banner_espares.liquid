{%- comment -%}
  Search Banner Section - eSpares Style
  Search form and helpful tips with manual mock data
{%- endcomment -%}

{%- comment -%} MANUAL MOCK DATA {%- endcomment -%}
{%- assign mock_product_types = "Door Seal|Heating Element|Water Filter|Spray Arm|Vacuum Belt|Turntable|Lint Filter|Grease Filter|Thermostat|Pump|Motor|Hose|Gasket|Handle|Knob|Switch|Sensor|Control Board|Display Panel|Glass Shelf" | split: "|" -%}
{%- assign mock_categories = "Washing Machines|Dishwashers|Ovens & Cookers|Fridges & Freezers|Vacuum Cleaners|Tumble Dryers|Microwaves|Coffee Machines|Blenders & Mixers|Irons & Steamers" | split: "|" -%}
{%- assign mock_brands = "Bosch|Samsung|Whirlpool|LG|Hotpoint|Beko|Siemens|Miele|AEG|Electrolux|Indesit|Zanussi|Candy|Hoover|Dyson" | split: "|" -%}

<style>
:root {
  --primary-orange: #ff6b35;
  --primary-orange-light: #ff8a5e;
  --primary-orange-dark: #e55a2b;
  --accent-orange: #ffab47;
  --dark-gradient-start: #2c3e50;
  --dark-gradient-end: #34495e;
  --pure-white: #ffffff;
  --light-gray: #f8f9fa;
  --border-gray: #e9ecef;
  --text-dark: #2c3e50;
  --text-muted: #6c757d;
  --shadow-light: 0 2px 12px rgba(255, 107, 53, 0.1);
  --shadow-medium: 0 4px 20px rgba(255, 107, 53, 0.15);
  --border-radius: 16px;
  --border-radius-small: 8px;
  --transition: all 0.3s ease;
}

.espares-search-banner {
  background: linear-gradient(135deg, var(--dark-gradient-start) 0%, var(--dark-gradient-end) 100%);
  color: white;
  padding: 50px 0;
  position: relative;
  overflow: hidden;
}

.espares-search-banner::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, transparent 30%, rgba(255, 107, 53, 0.1) 70%);
  pointer-events: none;
}

.espares-search-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
  text-align: center;
  position: relative;
  z-index: 1;
}

.espares-search-title {
  font-size: 2.8rem;
  font-weight: 700;
  margin-bottom: 15px;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
  background: linear-gradient(45deg, white, var(--accent-orange));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.espares-search-subtitle {
  font-size: 1.2rem;
  opacity: 0.95;
  margin-bottom: 35px;
  font-weight: 500;
}

.espares-search-form {
  max-width: 650px;
  margin: 0 auto 35px;
  position: relative;
}

.espares-search-input {
  width: 100%;
  padding: 18px 70px 18px 24px;
  font-size: 1.1rem;
  border: 3px solid transparent;
  border-radius: var(--border-radius);
  outline: none;
  box-shadow: var(--shadow-medium);
  transition: var(--transition);
  background: var(--pure-white);
  color: var(--text-dark);
  font-weight: 500;
}

.espares-search-input:focus {
  border-color: var(--primary-orange);
  box-shadow: 0 0 0 4px rgba(255, 107, 53, 0.2), var(--shadow-medium);
  transform: translateY(-2px);
}

.espares-search-input::placeholder {
  color: var(--text-muted);
  font-weight: 400;
}

.espares-search-button {
  position: absolute;
  right: 6px;
  top: 6px;
  bottom: 6px;
  background: linear-gradient(135deg, var(--primary-orange), var(--primary-orange-light));
  color: white;
  border: none;
  padding: 0 24px;
  border-radius: var(--border-radius-small);
  font-weight: 700;
  cursor: pointer;
  transition: var(--transition);
  box-shadow: 0 2px 8px rgba(255, 107, 53, 0.3);
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 1rem;
}

.espares-search-button:hover {
  background: linear-gradient(135deg, var(--primary-orange-dark), var(--primary-orange));
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(255, 107, 53, 0.4);
}

.espares-search-button:active {
  transform: translateY(0);
}

.espares-search-tips {
  display: flex;
  justify-content: center;
  gap: 40px;
  font-size: 0.95rem;
  opacity: 0.9;
  flex-wrap: wrap;
}

.espares-search-tip {
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 12px 16px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-small);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: var(--transition);
}

.espares-search-tip:hover {
  background: rgba(255, 107, 53, 0.2);
  transform: translateY(-2px);
}

.espares-search-tip span:first-child {
  font-size: 1.2rem;
}

.espares-search-autocomplete {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background: white;
  border-radius: var(--border-radius);
  box-shadow: 0 8px 25px rgba(0,0,0,0.2);
  margin-top: 8px;
  z-index: 1000;
  display: none;
  border: 1px solid var(--border-gray);
  overflow: hidden;
}

.espares-autocomplete-item {
  padding: 14px 24px;
  color: var(--text-dark);
  border-bottom: 1px solid var(--border-gray);
  cursor: pointer;
  transition: var(--transition);
  font-weight: 500;
  display: flex;
  align-items: center;
  gap: 12px;
}

.espares-autocomplete-item:hover {
  background: linear-gradient(135deg, var(--light-gray), rgba(255, 107, 53, 0.05));
  color: var(--primary-orange);
  padding-left: 28px;
}

.espares-autocomplete-item:last-child {
  border-bottom: none;
}

.espares-autocomplete-item::before {
  content: 'üîç';
  opacity: 0.6;
  transition: var(--transition);
}

.espares-autocomplete-item:hover::before {
  opacity: 1;
}

@media (max-width: 768px) {
  .espares-search-banner {
    padding: 40px 0;
  }
  
  .espares-search-title {
    font-size: 2.2rem;
  }
  
  .espares-search-tips {
    flex-direction: column;
    gap: 15px;
    align-items: center;
  }
  
  .espares-search-input {
    padding: 15px 60px 15px 20px;
    font-size: 1rem;
  }
  
  .espares-search-button {
    padding: 0 20px;
    font-size: 0.9rem;
  }
  
  .espares-search-form {
    max-width: 100%;
  }
}
</style>

{%- if section.settings.show_search_banner -%}
<div class="espares-search-banner">
  <div class="espares-search-container">
    <h1 class="espares-search-title">
      {%- if search.performed and search.terms != "" -%}
        {%- comment -%} Check if we should show no results (same logic as main search) {%- endcomment -%}
        {%- assign search_term = search.terms | downcase -%}
        {%- assign matching_products = 0 -%}
        
        {%- for product_type in mock_product_types -%}
          {%- assign product_type_lower = product_type | downcase -%}
          {%- if product_type_lower contains search_term or search_term contains product_type_lower -%}
            {%- assign matching_products = matching_products | plus: 1 -%}
          {%- endif -%}
        {%- endfor -%}
        
        {%- if matching_products == 0 -%}
          No results for "{{ search.terms }}"
        {%- else -%}
          {%- assign random_multiplier = search_term.size | modulo: 5 | plus: 1 -%}
          {%- assign final_count = matching_products | times: random_multiplier | plus: 12 -%}
          {{ final_count }} results for "{{ search.terms }}"
        {%- endif -%}
      {%- else -%}
        Find the right part for your appliance
      {%- endif -%}
    </h1>
    
    {%- unless search.performed -%}
      <p class="espares-search-subtitle">
        Search from over 1 million genuine spare parts and accessories
      </p>
    {%- endunless -%}
    
    <form class="espares-search-form" action="{{ routes.search_url }}" method="get" role="search">
      <input type="search" 
             name="q" 
             class="espares-search-input"
             placeholder="Search by model number, part name, or appliance type..."
             value="{{ search.terms | escape }}"
             autocomplete="off"
             id="searchInput">
      
      <button type="submit" class="espares-search-button">
        üîç Search
      </button>
      
      <div class="espares-search-autocomplete" id="autocompleteResults"></div>
    </form>
    
    {%- if section.settings.show_search_tips -%}
      <div class="espares-search-tips">
        <div class="espares-search-tip">
          <span>üí°</span>
          <span>Try model numbers like "WMF145"</span>
        </div>
        <div class="espares-search-tip">
          <span>üîß</span>
          <span>Search by part type like "door seal"</span>
        </div>
        <div class="espares-search-tip">
          <span>üè†</span>
          <span>Browse by appliance category</span>
        </div>
      </div>
    {%- endif -%}
  </div>
</div>
{%- endif -%}

<script>
// Dynamic autocomplete suggestions based on mock data
const mockSuggestions = [
  {%- for product_type in mock_product_types limit: 20 -%}
    '{{ product_type | downcase }}'
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
];

// Add some category suggestions
const categorySuggestions = [
  {%- for category in mock_categories limit: 10 -%}
    '{{ category | downcase }} parts'
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
];

// Add some brand suggestions  
const brandSuggestions = [
  {%- for brand in mock_brands limit: 15 -%}
    '{{ brand | downcase }} parts'
    {%- unless forloop.last -%},{%- endunless -%}
  {%- endfor -%}
];

// Combine all suggestions
const allSuggestions = [...mockSuggestions, ...categorySuggestions, ...brandSuggestions];

document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('searchInput');
  const autocompleteResults = document.getElementById('autocompleteResults');
  
  if (!searchInput || !autocompleteResults) return;
  
  searchInput.addEventListener('input', function() {
    const query = this.value.toLowerCase().trim();
    
    if (query.length < 2) {
      autocompleteResults.style.display = 'none';
      return;
    }
    
    const matches = allSuggestions.filter(suggestion => 
      suggestion.toLowerCase().includes(query)
    ).slice(0, 8);
    
    if (matches.length > 0) {
      autocompleteResults.innerHTML = matches.map(match => 
        `<div class="espares-autocomplete-item" onclick="selectSuggestion('${match}')">${match}</div>`
      ).join('');
      autocompleteResults.style.display = 'block';
    } else {
      autocompleteResults.style.display = 'none';
    }
  });
  
  // Hide autocomplete when clicking outside
  document.addEventListener('click', function(e) {
    if (!searchInput.contains(e.target) && !autocompleteResults.contains(e.target)) {
      autocompleteResults.style.display = 'none';
    }
  });
});

function selectSuggestion(suggestion) {
  document.getElementById('searchInput').value = suggestion;
  document.getElementById('autocompleteResults').style.display = 'none';
  document.querySelector('.espares-search-form').submit();
}
</script>

{% schema %}
{
  "name": "Search Banner",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_search_banner",
      "label": "Show search banner",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_search_tips",
      "label": "Show search tips",
      "default": true
    }
  ]
}
{% endschema %}
