// Add data-form-mandatory-match="" with the name of the matching input to check the values are the same. eg Confirm password / Confirm Email

// Add data-form-mandatory-onload="false" to the mandatory field that isn't required on the initial load - this can then be changed to 'true' when eg a checkbox has been ticked
function toggleFormMandatory(name,status) {
	var arr = name.split(',');

	var i;
	for (var i = arr.length - 1; i >= 0; i--) {
		$('[name="' + arr[i] + '"]').attr('data-form-mandatory-onload', status);
	}
};

(function ($) {
	$.fn.customFormValidation = function (options) {
		// Set default variables
		var settings = $.extend({
			submitButton : '.btn-continue', // Selector for the submit button
			submitOutsideForm : false,
			mandatoryFields: [], // {name: "", acceptOneOf: [""], message: ""} Pass in the mandatory field name, other fields to accept, and error message to display
			errorIntro: '', // Message to appear before the error list
			errorElement: '', // Target div to display error message 
		}, options);
	
		return this.each(function() {

			var element = $(this);

			// Pass in custom options
			var submitOutsideForm = settings.submitOutsideForm;
			if (submitOutsideForm) {
				var submitButton = $(document).find(settings.submitButton);
			} else {
				var submitButton = $(this).find(settings.submitButton);
			};
			var mandatoryFields = settings.mandatoryFields;
			var errorElement = settings.errorElement;

			// Email validation
			function isEmail(email) {
				var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
				return regex.test(email);
			}

			// Expiry Date validation
			function expiryCheck(expiryDate) {
				var valid = 1,
					pattern = /^\d{2}$/,
					dateValue = expiryDate.split('/'),
					year = (new Date().getFullYear()) % 100;

				if (!pattern.test(dateValue[0]) || !pattern.test(dateValue[1])
				||  dateValue[0] < 1 || dateValue[0] > 12
				||  dateValue[1] < year) {
					valid = 0;
				}
				return valid;
			}

			// Credit Card Number validation
			function cardNoluhn10(luhn) {
				// Remove the spaces from the credit card number inserted by the mask
				luhn = String(luhn).replace(/[^\d]/g, "");
				if (luhn.length == 0) {
					return 0;
				}
				// Luhn check from https://gist.github.com/ShirtlessKirk/2134376
				var len = luhn.length,
					mul = 0,
					prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],
					sum = 0;
				while (len--) {
					sum += prodArr[mul][parseInt(luhn.charAt(len), 10)];
					mul ^= 1;
				}
				return sum % 10 === 0 && sum > 0;
			}


			// Add a message under the field's .form-row
			function injectStandloneError(message, name, nameField, formRowClass) {
				if(!$(element).find('.form-error-row-' + name).length) {
					$(nameField).closest(formRowClass).after(
						'<div class="form-row form-error-row-' + name + '">' +
							'<div class="form-label"></div>' +
							'<div class="form-input">' +
								'<div class="error-message alt slim"><p>' + message + '</p></div>' +
							'</div>' +
						'</div>'
					);
				}
			}

			function removeStandaloneError(name) {
				$('.form-error-row-' + name).remove();
			}

			$(submitButton).on('click',function(e) {
				var error = [];

				// For each mandatory field passed in...
				var i;
				for (var i = mandatoryFields.length - 1; i >= 0; i--) {
					var field = mandatoryFields[i];
					
					var name = field.name;
					var nameField = $(element).find('[name=' + name + ']');

					// Check if the field exists on the page
					if ( !nameField.length ) {
						continue;
					};

					// Get element type - input and type, select, textarea. Any fields that require specific validation can be added here
					if ( name == 'expiryDate' ) {
						var nameFieldType = 'expiryCheck';
					} else if ( name == 'card_no' ) {
						var nameFieldType = 'cardNoCheck';
					} else if ( name == 'answer' ) { // Captcha form
						var nameFieldType = 'captchaForm';
					} else if ( nameField.is("input") ) {
						var nameFieldType = nameField.attr('type');
					} else if ( nameField.is("select") ) {
						var nameFieldType = 'select';
					} else if ( nameField.is("textarea") ) {
						var nameFieldType = 'textarea';
					}

					// Error message to display if input does not validate
					var message = field.message;

					// Set validation defaults,and change if the input requires unique validation
					var validationType = !$(nameField).val().trim();
					var formRowClass = ".form-row"; // Parent element class to apply the error class to

					switch ( nameFieldType ) {
						case 'expiryCheck':
							var validationType = !$(nameField).val() || !expiryCheck($(nameField).val());
							break;
						case 'cardNoCheck':
							var validationType = !cardNoluhn10($(nameField).val());
							break;
						case 'captchaForm':
							var formRowClass = ".captcha-widget";
							break;
						case 'email':
							var validationType = !isEmail($(nameField).val());
							break;
						case 'select':
							var selectedOption = $(nameField).find('option:selected').val();
							var validationType = selectedOption == 0;
							break;
						case 'checkbox':
							var validationType = !$(nameField).is(':checked');
							var formRowClass = ".form-checkbox-radio";
							break;
						case 'radio':
							var validationType = !$(nameField).is(':checked');
							var formRowClass = ".form-checkbox-radio";
							break;
						default:
							break;
					}

					// Check if the field is mandatory when form is initally loaded. This allows us to change this value if another script activates a second part of the form.
					if (nameField.attr('data-form-mandatory-onload') == 'false') {
						$(nameField).closest(formRowClass).removeClass('form-error');
						continue;
					}

					// Validate! And push an error message into the array if required
					var failedAdvanced = false;
					if(field.advanced) {
						if(field.advanced.validation()) {
							removeStandaloneError(name);
							$(nameField).closest(formRowClass).removeClass('form-error');
						} else {
							failedAdvanced = true;
							injectStandloneError(field.advanced.message, name, nameField, formRowClass);
							$(nameField).closest(formRowClass).addClass('form-error');
							error.push(message);
							e.preventDefault();
						};
					}

					if ( validationType ) {
						var skipError = false;
						if(field.acceptOneOf) {
							for(let j = 0; j < field.acceptOneOf.length; j++) {
								// acceptOneOf only supports a generic 'has value' check
								var acceptField = $(element).find('[name=' + field.acceptOneOf[j] + ']');
								if($(acceptField).val().trim()) {
									skipError = true;
									continue;
								}
							}
						}
						if(skipError) {
							$(nameField).closest(formRowClass).removeClass('form-error');
						} else {
							$(nameField).closest(formRowClass).addClass('form-error');
							error.push(message);
							e.preventDefault();						
						}
					} else if ( nameField.attr('data-form-mandatory-match') != undefined ) { // If the field value needs to match another field
						var targetElement = $(element).find('[name=' + nameField.attr('data-form-mandatory-match') + ']');
						// If the value matches, remove the error
						if ( nameField.val() == targetElement.val() ) {
							$(nameField).closest(formRowClass).removeClass('form-error');
						} else {
						// If the value does not match, log the error
							$(nameField).closest(formRowClass).addClass('form-error');
							error.push(message);
							e.preventDefault();
						}
					} else {
						if(!failedAdvanced) {
							$(nameField).closest(formRowClass).removeClass('form-error');
						}
					}

				}

				// If there are any errors, create the error message
				if ( error.length != 0 ) {
					$(errorElement).html( '<div class="error-message"><p>' + settings.errorIntro + ' ' + error.reverse().join(', ')+'</p></div>');
				}

			});
		
		});
	
	};

}(jQuery));
