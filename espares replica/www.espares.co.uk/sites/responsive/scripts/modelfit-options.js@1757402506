function populateApplianceTypes(field, handler_url){
	$.ajax({
		type: 'GET',
		url: handler_url,
		success: function(app_groups) {
			if (app_groups != null) {
				$(field).empty();
				$(field).append(`<option value="0">${modelfitAppliance}</option>`);
				$.each(app_groups, function(i,group) {
					$(field).append(Object.keys(group).map(a=>`<optgroup label="${a}">${group[a].map(b=>`<option b-link="${b.brand_link}" url="${b.link}">${b.name}</option>`).join``}</optgroup>`));
					});
				}
			},
			error: function(ex) {
			}
	    });
};

function populateBrands(field, handler_url) {
	var ajaxCall = (handler_url);

	$.ajax({
		type: 'GET',
		url: handler_url,
		success: function(brands) {
			function brandsNone() {
				$(field).empty();
				$(field).closest('.custom-select').addClass('disabled');
				$(field).prop('disabled', true);
				$(field).append(`<option value="0">N/A</option>`);
			}
			if (brands != null) {
				$(field).empty();
				$(field).append(`<option value='0'>${modelfitBrand}</option>`);
				$.each(brands, function(i, b) {
					$(field).append(`<option path="${b.pathIDs}" url="${b.link}">${b.name}</option>`);
				});
				$(field).prop('disabled', false);
				$(field).closest('.custom-select').removeClass('disabled');
				$(field).closest('.form').find('#model-select-menu').empty();
				if (brands.length == '0') {
					brandsNone()
				}
			} else {
				brandsNone()
			}
		},
		error: function(ex) {
		}
	});
}

function populateModels(
		fieldwrapper,		// HTML selector
		field,			// HTML selector
		source,			// API URL. Use %QUERY% if 'field' value should be passed in
		searchBy,		// API key to search by
		returnBy,		// API key to return if selected
		resultField,		// Field to update with selected result
		resultAttribute,	// Attribute within field to update
	) {

	var fieldwrapper = $(field).closest(fieldwrapper);
	var bestMatch = -1;

	// EasyAutoComplete plugin
	var options = {
		url: function(phrase) {
			$(fieldwrapper).addClass('loading');
			return source.replace('%QUERY%', encodeURIComponent(phrase));
		},
		getValue: searchBy,
		list: {
			onLoadEvent: function() {
				$(fieldwrapper).removeClass('loading');
				bestMatch = $(field).getItemData(0);
				$('.autocomplete-no-results').remove();
				if (bestMatch == -1) {
					$('.easy-autocomplete-container').prepend(
						'<ul class="autocomplete-no-results focus">' +
							`<li class="pne show"><a href="/find-your-model-number/help.pl" target="_parent">${modelfitNotFound}</a></li>` +
						'</ul>'
					);
				} else {
					$('.easy-autocomplete-container ul').append(
						`<li class="pne show"><a href="/find-your-model-number/help.pl" target="_parent">${modelfitNotFound}</a></li>`
					);
				}
			},
			onChooseEvent: function() {
				bestMatch = $(field).getSelectedItemData();
				$(field).val(bestMatch['name'])
				$(resultField).attr(resultAttribute, bestMatch[returnBy]);

			},
			match: {
				enabled: false,
				method: function (element, phrase) {
					if (element.indexOf(phrase) === 0) {
						return true;
					} else {
						return false;
					}
				}
			},
			sort: { enabled: true },
			maxNumberOfElements: 5,
		},
		requestDelay: 800
	};

	$(field).easyAutocomplete(options);
	$(field).prop('disabled', false);

	$('.autocomplete-wrapper').on('mouseenter', 'li.pne', function () {
		$('.easy-autocomplete-container').find('li.selected').removeClass('selected');
	});

	$(document).mouseup(function(e) {
		var container = $('.easy-autocomplete');
		var modelNotFound = $('.autocomplete-no-results');

		if (!container.is(e.target) && container.has(e.target).length === 0) {
			modelNotFound.removeClass('focus');
		} else {
			modelNotFound.addClass('focus');
		}
	});
}

$(document).ready(function () {
	populateApplianceTypes('#appliance-select-menu', '/ajax-handler.pl?handler=mf_app');

	// Populate brand dropdown and update search link
	$('#appliance-select-menu').change(function() {
		var getURL = $(this).find(':selected').attr('url');
		$('#model-search').attr('search-url', getURL);
		$(this).closest('.form').find('button').removeClass('btn-disabled').prop('disabled', false);

		populateBrands('#brand-select-menu', $('#appliance-select-menu option:selected').attr('b-link'));

		var modelSelectMenu = $(this).closest('.form').find('#model-select-menu');

		modelSelectMenu.val('');
		modelSelectMenu.prop('disabled', true);

		$(this).closest('.form').find('#appliance-select-menu option[value="0"]').addClass('hidden');
	});

	// Update search link and ready autocomplete
	$('#brand-select-menu').change(function() {
		var getURL = $(this).find(':selected').attr('url');
		$('#model-search').attr('search-url', getURL);

		// Re-initialise the model autocomplete
		var path = $('#brand-select-menu').find(':selected').attr('path');

		populateModels(
			'#model-container',
			'#model-select-menu',
			`/ajax-handler.pl?handler=models&path=${path}&srch=%QUERY%`,
			'name',
			'link',
			'#model-search',
			'search-url',
		);

		$(this).closest('.form').find('#model-select-menu').val('');
		$(this).closest('.form').find('#brand-select-menu option[value="0"]').addClass('hidden');
	});

	$('#model-search').on('click', function() {
		var url = $('#model-search').attr('search-url');
		window.location.href = url;
		return false;
	});
});

$(window).on('pageshow', function() {
	var applianceOption = $('#appliance-select-menu option[value="0"]');
	var brandOption = $('#brand-select-menu option[value="0"]');
	var brandSelect = $('#brand-select-menu');
	var modelSelect = $('#model-select-menu');
	var modelSearch = $('#model-search');

	if ($('#appliance-select-menu option').length > 1 || brandSelect.find('option').length > 1 || modelSelect.val() || $('.modelfit-inputs .disabled').length == 1 || $('.modelfit-inputs .btn-disabled').length == 1 || $('.modelfit-inputs select[disabled]').length == 1 || $('.modelfit-select-button[disabled]').length == 1 || $('#model-select-menu[disabled]').length == 1) {
		applianceOption.prop('selected', 'selected');
		brandOption.prop('selected', 'selected');
		modelSelect.val('');

		applianceOption.removeClass('hidden');
		brandOption.removeClass('hidden');

		brandSelect.closest('.custom-select').addClass('disabled');
		modelSelect.closest('.easy-autocomplete').addClass('disabled');
		modelSearch.addClass('btn-disabled');

		var disabledFieldAttr = [brandSelect, modelSelect, modelSearch];
		$.each(disabledFieldAttr, function(e){
			disabledFieldAttr[e].prop('disabled', true);
		})
	}
});
